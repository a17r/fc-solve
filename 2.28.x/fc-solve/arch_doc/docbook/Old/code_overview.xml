<?xml version='1.0' encoding='utf-8'?>

<!-- <!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oa
sis-open.org/docbook/xml/4.1.2/docbookx.dtd"[]> -->
<!-- This comment is meant to settle gvim -->

<chapter id="code_overview">
    <title>Overview of the Code</title>
    <section id="overview_of_the_program">
        <title>Overview of the Program</title>

        <para>
            &fcs; solves boards by using Depth-First Search or 
            Best-First-Search scans starting from the initial board. It has 
            a collection of the states, and constructs a tree of the 
            states descending from each state to its "parent". A parent state 
            means the state in which from which it was discovered.
        </para>

        <para>
            &fcs; can run several "tests" on each state. Each test generates
            a list of derived states. Some of the tests are Freecell meta-move 
            ones, some are Freecell atomic move ones, and the others are 
            Simple Simon meta-move ones. The order of the tests can be 
            specified at the command line, and tests can be grouped, and 
            the order of checking of the tests within a group will be 
            determined by a special callback.
        </para>
        <para>
            To perform the scans themselves Freecell Solver distinguishes 
            between soft threads, hard threads and instances. An instance is 
            a collection of states and an initial board to explore. Each 
            instance may have several hard threads and each hard thread may 
            have several soft threads. A hard thread is something
            that would likely be put in a system thread. It contains such 
            resources, that a collision between them among several hard 
            threads running in parallel is undesirable. Nevertheless, 
            every hard thread can access the resources allocated by other 
            hard threads, should he encounter them in his scan.
        </para>
        <para>
            A soft thread is a singular scan. It performs a scan for a 
            certain number of iterations, at which point the hard thread 
            switches to a different soft thread.
        </para>
    </section>
    <section id="overview_of_the_utility_modules">
        <title>Overview of the Utility Modules</title>
        <section id="app_str.c">
            <title>app_str.c</title>
            <para>
                This file contains a utility class that appends sprintf'ed 
                output to a dynamically allocated buffer while growing the 
                buffer if necessary.
            </para>
            <para>
                It is still possible that the sprintf will generate a long
                enough string that will cause a buffer overflow. However,
                since the class is only used to render states into strings,
                and the margin allowed for the buffer is long enough, this
                cannot actually happen.
            </para>
        </section>
        <section id="lookup2.c">
            <title>lookup2.c</title>
            <para>
                This module implements a 
                <ulink url="http://burtleburtle.net/bob/hash/">hash function</ulink> 
                that was developed by <ulink url="http://burtleburtle.net/bob/">Bob Jenkins</ulink>. 
                
                It is essentially his code, that was just integrated into 
                &fcs; for convenience (note that it is also Public Domain).
            </para>
        </section>
        <section id="rand.c">
            <title>rand.c and rand.h</title>
            <para>
                Implements a random number generating class. The algorithm is
                identical to that of the Microsoft C Run-Time Library (RTL),
                but the generator can be instantiated.
            </para>
        </section>
        <section id="fcs_hash.c">
            <title>fcs_hash.c</title>
            <para>
                An optimized hash implementations. This has maps keys alone,
                not key-value pairs. It stores the hash values next to the 
                keys, so two keys can be first compared with their hash values,
                before the costly full comparison is done. It also uses
                a secondary hash to speed up the detection of two keys with
                identical primary hash values.
            </para>
            <para>
                Not all the functions of the hash Abstract Data Type are
                implemented here. Only these that need to be used by 
                Freecell Solver.
            </para>
        </section>
        
        <section id="fcs_dm.c">
            <title>fas_dm.c</title>
            <para>
                This module implements two functions - an advanced binary
                search one and a function to merge a small sorted array into
                a larger sorted array. It was used until the newer hash or
                balanced binary tree storage were implemented, and may still
                be used if <symbol>FCS_STATE_STORAGE_INDIRECT</symbol>
                or <symbol>FCS_STACK_STORAGE_INDIRECT</symbol> are specified.
                <footnote id="sorted_array_as_storage">
                    <para>
                        It is no longer recommended to use a sorted array as
                        a state or stack storage, as they are much slower than
                        using a hash or a balanced binary tree, both in 
                        asymptotic complexity (O(n<superscript>2</superscript>))) 
                        and in average performance.
                    </para>
                </footnote>
            </para>
        </section>

        <section id="fcs_isa.c">
            <title>fcs_isa.c</title>
            <para>
                This module implements indirect stack allocation to states. 
                It allocates every states in memory pools (called packs) which 
                have a fixed location in memory and allocates as many such 
                pools as it can.
            </para>

            <para>
                Each pool contains several states that are placed one after 
                the other, that thus retain their pointer. That way, memory 
                is conserved as an individually malloced state may have a 
                lot of overhead. (a malloced block+a fixed amount of data is 
                rounded to the nearest power of 2)
            </para>
            <para>
                fcs_isa allows releasing the last allocated state in case it 
                will not be used.
            </para>
        </section>

        <section id="alloc.c">
            <title>alloc.c</title>
            <para>
                This module is a more sophisticated version of fcs_isa.c. What 
                it does is compactly allocate blocks of arbitrary length, 
                usually used for dynamically allocated Freecell columns.
            </para>
        </section>
        

        <section id="cl_chop.c">
            <title>cl_chop.c</title>
            <para>
                This module contains a class that implements a chopping of a 
                string into arguments. This is done using a subset of the 
                UNIX Bourne shell functionality. Namely:
            </para>
            <para>
                <orderedlist>
                    <listitem>
                        <para>
                            A backslash (\) makes the next character an 
                            actual such character.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            A newline or a whitespace separates a word.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            A backslash at the end of the line continues the 
                            processing.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Double quotes (") wrap an argument that may contain
                            whitespace.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            A pound sign (#) makes a comment that extends
                            to the end of the line.
                        </para>
                    </listitem>                    
                </orderedlist>
            </para>
            <para>
                The code itself is very spaghetti-like but it is working.
            </para>
        </section>
        <section id="pqueue.c">
            <title>pqueue.c</title>
            <para>
                This module implements a priority queue as a binary heap. It
                is derived from <ulink url="http://www.geocities.com/SiliconValley/Lakes/4929/">Justin Heyes-Jones</ulink> C++ code which he has kindly 
                donated to &fcs; (while relicensing it under the public 
                domain). Since then, the code has been converted to ANSI C
                , modified and optimized.
            </para>
            <para>
                This module is used by the Best-First-Search scan.
            </para>
        </section>
    </section>
    <section id="overview_of_the_core_modules">
        <title>Overview of the Core Modules</title>
        <para>
            Bottom-up
        </para>
        <section id="card.c">
            <title>card.c</title>
            <para>
                Elementary functions to convert cards to and from their 
                string representations. The <symbol>u</symbol> and
                <symbol>p</symbol> within the code stand for "user" and
                "perl" respectively, and mean user representation and 
                internal C representation.
            </para>
            <para>
                The first experimental version of &fcs; was written in
                Perl, and since then the naming convention for this case 
                persisted.
            </para>
        </section>

        <section id="state.h">
            <title>state.h</title>
            <para>
                This is a header file, but it can be considered a module
                due to the large amount of logic that it implements. It defines 
                fcs_state_t (which represents a complete layout of the 
                Freecell board) and of fcs_state_with_locations_t. It contains
                many macros for manipulating states and cards. (all of them 
                should behave like function calls)
            </para>
            <para>
                The state_with_locations_t contains the real positions of the
                stacks and freecells (refer to (SECTION_REF Canonization and
                Normalization)) and other things that the system uses but 
                don't uniquely identify the state in the state collection.
            </para>
        </section>

        <section id="state.c">
            <title>state.c</title>
            <para>
                This file contains various functions for manipulating states.
                Among the many things implemented in it are state canonization,
                state duplicating, state comparison and converting to and from
                string format.
            </para>
        </section>

        <section id="move.c">
            <title>move.c and move.h</title>
            <para>
                This module contains routines for handling individual moves
                (freecell &rarr; stack, stack &rarr; freecell, stack &rarr;
                stack) and various special moves as well as entire move 
                stacks, which contain a sequence of moves to be played 
                between two intermediate states.
            </para>
        </section>
        
        <section id="preset.c">
            <title>preset.c</title>
            <para>
                This file manages the presets: configurations of stacks
                number, freecells number, decks number, and the other 
                parameters that define how a game is played. A preset is a 
                variant of Solitaire such as Freecell, Baker's Game, Simple 
                Simon, Good Measure, etc. Many of them are categorized in 
                PySol under different categories than the Freecell category. 
                Moreover, some "Freecell-like" games such as Penguin are not
                supported by Freecell Solver yet.
            </para>
            <para>
                The routines in the file enable applying a preset to an 
                instance (by its name), applying a preset to an instance
                by a pointer to it, etc. It is also directly used by lib.c
                to maintain consistency across a sequence of consecutive 
                instances.
            </para>
        </section>

        <section id="freecell.c">
            <title>freecell.c</title>
            <para>
                This module contains "test functions" for Freecell tests. A 
                test receives an origin state and tries to deduce if moves of 
                a certain sort are possible. It fills in a derived states list.
            </para>
            <para>
                This code uses some macros defined in tests.h. It contains
                both meta-move tests and atomic moves ones.
            </para>
        </section>

        <section id="simpsim.c">
            <title>simpsim.c</title>
            <para>
                This file is similar in spirit to 
                <filename>freecell.c</filename> only it contains
                Simple Simon tests.
            </para>
        </section>

        <section id="caas.c">
            <title>caas.c</title>
            <para>
                This file contains the <function>check_and_add_state</function> 
                function - a function that is used to determine if a reached 
                state is found in the states collection and if so, to insert 
                it there. (an operation that can be considered atomic). 
            </para>
            <para>
                It has several macros used to do it for the various types of 
                states collections supported at compile time. It also has a 
                function to collect the new stacks that were present in a 
                similar fashion.
            </para>
            <para>
                It is being used by the tests functions to put a state in 
                the state collection.
            </para>
        </section>

        <section id="scans.c">
            <title>scans.c</title>
            <para>
                This module contains the functions of the various scans and 
                their auxiliary functions. The scan functions run tests and 
                traverse the graph according to some inherent logic. Currently 
                present are random-dfs/soft-dfs (soft-dfs is random-dfs 
                without randomizing groups), Hard-DFS, 
                Best-First-Search (named A* in the code) and
                Breadth-First-Search (named BFS in the code) functions.
            </para>
        </section>

       
        <section id="intrface.c">
            <title>intrface.c</title>
            <para>
                This module contains the logic that manages a solver instance,
                configures it and runs it. It used the scans module to 
                perform the scan and other modules to configure it. Note that
                the interface presented here is very raw, and not meant
                to be used as an API.
            </para>
        </section>


        <section id="lib.c">
            <title>lib.c</title>
            <para>
                This module contains the user API. It manages a sequence of 
                instances that can be used to solve a board, and then recycled 
                to solve another. It uses intrface.c to perform its 
                operations, and do the actual configuring and solving. It 
                supplies the API header file <filename>fcs_user.h</filename> 
                which contains one function for doing any given operation, and 
                these functions are implemented in lib.c.
            </para>
        </section>

        <section id="cmd_line.c">
            <title>cmd_line.c</title>
            <para>
                This module can be used to analyze an array of strings 
                (similar to that given to the <function>main()</function> 
                function) and configure a user instance accordingly. It also 
                implements reading such arguments from files and a presets 
                mechanism that can be used to assign names to common 
                configuration and load them.
            </para>
        </section>

    </section>
</chapter>


<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
sgml-parent-document: "fcs_arch_doc.xml"
End:
-->

