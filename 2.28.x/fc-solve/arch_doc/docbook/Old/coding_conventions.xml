<?xml version='1.0' encoding='utf-8'?>

<!-- <!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oa
sis-open.org/docbook/xml/4.1.2/docbookx.dtd"[]> -->
<!-- This comment is meant to settle gvim -->

<chapter id="coding_conventions">
    <title>Coding Conventions</title>
    <section id="bottom_up_design_and_evolution">
        <title>Bottom-Up Design and Evolution</title>
        <para>
            &fcs; was designed bottom-up: first by writing functions to input
            cards and then to handle states and finally the algorithm itself. I
            find that bottom-up design (as evangelized by Paul Graham and 
            others)- start by writing small utility functions and classes 
            and then integrate into a grander scheme, has been a guiding 
            principle when working on &fcs;.
        </para>
        <para>
            &fcs; has many utility classes, and has also been coded 
            incrementally. I also find bottom-up design more natural.
        </para>
    </section>
    <section id="strict_adherence_to_the_ansi_c_lang">
        <title>Strict Adherence to the ANSI C Language</title>
        <para>
            &fcs; is written in pure ANSI C and uses no gcc extensions, no 
            C99 or C++ extensions. I did allow myself to make use of
            <emphasis>inline</emphasis> in some places, but they are isolated
            to be compiled with gcc alone.
        </para>
        <para>
            &fcs; is actively compiled with gcc and with the Visual C++
            ANSI C compiler. I expect that it should be compilable with
            other proprietary compilers on various systems. As this variety
            of compilers only support the bare ANSI C standard, I have 
            to stick to it. This is despite the fact that such extensions may
            have made the code more optimized and my life as a programmer much 
            easier.            
        </para>
    </section>
    <section id="strict_adherence_to_the_ansi_c_standard_lib">
        <title>Strict Adherence to the ANSI C Standard Library</title>
        <para>
            &fcs; is dependant on the ANSI C Standard Library as defined
            by the standard and on that library alone. The core FCS code is
            not dependant on glib, apr or any other abstraction or 
            encapsulation libraries of this kind.
        </para>
        <para>
            &fcs; can optionally be compiled to make use of some binary trees
            and hash implementations found in external libraries. This 
            serves as a drop-in replacement for its internal hash 
            implementation, which was shown to usually give better results.
        </para>
        <para>
            Note that a lot of the logic provided by such libraries is 
            implemented internally in &fcs;.
        </para>
    </section>
    <section id="cc_namespace_purity">
        <title>Namespace Purity</title>
        <para>
            All the global symbols of the &fcs; modules are prefixed with
            <symbol>freecell_solver_</symbol> prefix. Some macros supplied 
            to the user are prefixed with the <symbol>fcs_</symbol> prefix for convenience.
        </para>
        <para>
            As a general rule the naming convention is 
            <symbol>freecell_solver_[class name]_[method name]</symbol>. The identifiers
            also tend to be very verbose.
        </para>
    </section>
    <section id="cc_order_of_tradeoffs">
        <title>Order of Trade-offs in the Design of the Code</title>
        <para>
            &fcs; has the following trade offs in the design of the code:
        </para>
        <para>
            <orderedlist>
                <listitem>
                    <para>
                        Modularity - the code should be as generic as possible
                        and allow for maximal flexibility. The user should
                        be able to configure the library as he pleases.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Speed - the code should be optimized for speed. Many 
                        times in the code, it was made a bit less 
                        comprehensible to gain speed, and many times extra
                        techniques are implemented to ensure this goal.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Memory Consumption - should be reduced as much as
                        possible. A reduced memory consumption usually leads
                        to better speed, because there are less cache misses
                        this way.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Smart Algorithms - generally, algorithms with a low
                        complexity and such that give advantage to the code
                        are implemented.
                    </para>
                </listitem>                
            </orderedlist>
        </para>

        <para>
            Note that these trade-offs are subject to the programmer's whims,
            and many times, one was a bit sacrificed to satisfy the other.
        </para>
    </section>
    <section id="cc_no_global_symbols">
        <title>No Global or Static Variables</title>
        <para>
            &fcs; does not use global variables (except for constants) or such 
            that are statically defined within a function. All the non-temporary
            variables are present within structs, so they can easily be
            instantiated.
        </para>
        <para>
            One should note that several distinct instances of the solving 
            algorithm can be instantiated and made to run side by side or 
            alternately.
        </para>
    </section>
    <section id="cc_separation_of_internals_from_user_interface">
        <title>Separation of Internals from User and Application Programmer Interfaces</title>
        <para>
            FCS makes a clear distinction between the internals of the program,
            that are subject to change from version to version, and between the
            interface supplied to the user or the application programmer. All 
            the modules starting from <filename>intrface.c</filename> and below 
            are the internals of the program.
        </para>        
        <para>
            <filename>lib.c</filename> contain the API functions used by the
            programmer. <filename>cmd_line.c</filename> is an API to analyze
            a &fcs; command line. It itself uses only the 
            <filename>lib.c</filename> API. It provides a more flexible
            interface for configuring &fcs;, even to the application 
            programmer.
        </para>
        <para>
            <filename>main.c</filename> and 
            <filename>test_multi_parallel.c</filename> are two command line
            programs that use the command line interface and programmers 
            interface. Others can be written (and have been).
        </para>
    </section>
</chapter>


<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
sgml-parent-document: "fcs_arch_doc.xml"
End:
-->

