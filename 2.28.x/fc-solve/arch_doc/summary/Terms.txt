
Canonization - An extended state is canonized by its stacks being uniquely 
sorted according to their contents, and an array of indexes describing their
original locations sorted accordingly. This is done to make sure no two
states with the same permutation of states exist.

Depth - The number of successive f : state -> state.parent operations
it take to reach the initial state which is the base of the states graph.

f_s_ - short for freecell_solver_

freecell_solver_user - a generic name to the API used by the programmer
who wishes to utilize the Freecell Solver library in his application.

Graph - The states in the state collection form a directed graph. Each link
is a state -> derived state relationship.

Hard DFS - a Depth-First Search scan that uses procedural recursion. Since
suspending a scan and then resuming it are O(d) operations (where d is the
depth) instead of O(1) for Soft-DFS its use is deprecated. It was the original
scan supported by Freecell Solver 0.2.0 and still exists in the code.

Hard Thread - a collection of soft threads, that should generally be placed
in one system thread. Hard thread contains resources that soft threads from
different hard threads would interfere with each other in allocating. Hard
Threads contain a collection of state packs, and various counters and other
variables.

Instance - an initial board, a collection of states and all the scans
associated with it. An instance is initialized whenever one wishes to
solve new board. By using command line parameters it is possible to configure
it to solve the board in many ways. Instance logic is implemented in
intrface.c, and the user API is implemented in lib.c. Users are advised to
make use of the command line interface in cmd_line.c.

Iterations - the number of states checked by a scan, or by all the scans of 
a hard thread or of an instance. An iterations limit (called num_times in
the code) is used to restrict a soft thread, hard thread or instance from
running too long, and to allocate time quotas for different soft threads.

Moves - A one-time displacements of cards from stacks to stacks, from stacks
to freecells, or from freecells to stacks. Also contain some special moves 
such as those for canonizing stacks, and separators. Also see Move Stacks.

Move Stacks - A sequence of move implemented in its own class. 
(check move.c and move.h)

Normalization - normalization is the opposite of canonization. It is meant
to bring the stacks and freecells to their absolute locations. It is normally
done only when presenting a state to the user or to an upper state.

Packs - see State Packs

Parent - The state from which one state in the state graph was initially 
derived from. It is possible that this state would eventually be reached
from a different state, but its parent in that case, remains the same.

Presets -
1. A structure specifying the type of game according to number of stacks,
number of freecells, number of decks, whether kings can be placed in empty 
stacks, if sequences have unlimited moves, and how stacks are built by. Defined
in preset.c.
2. A set of command line arguments to be processed as if they were given on the 
command line. Can be used to shorten command lines. For instance "-l cool-jives"
or "-l john-galt-line" load the presets "cool-jives" and "john-galt-line" 
respectively. Implemented mostly in cmd_line.c.

Reparent - let's suppose state DEST has been derived from state SRC. If
the SRC.depth+1 is less than DEST.depth than DEST's parent will be reassigned
to SRC. (if reparenting is enabled)

Secondary Hash - a hash value that is calculated for every state that is not
used to determine the location of the element in the hash table, but that is
used for comparison. That is done in order to avoid needlessly comparing two
different states with the same hash value.

Soft DFS - A depth-first search scan that does not utilize procedural
recursion. In Freecell Solver, this utilizes a stack of records, each
containing the current state, the current test, the list of derived states,
and other information. This deviates from the standard put every state
at the end of one stack scheme (that exists in LM-Solve for example) and
is harder to maintain, but can be fine-tuned and conserve resources more
easily.

Soft Thread - a singular continuus scan operating on a states collection.
It can be Soft-DFS, DFS or Best First Search. There could be any number of
soft threads in a hard thread.

Stacks -
    1. Move Stacks (refer to them)
    2. Columns of the freecell games.
    3. The stacks used for maintaining the Soft-DFS recursion.
    4. The environment recursion stack.

State - the position of the game at any given situation. A board accurately
describes the contents of the stacks, freecells, and foundations at any given
time. A human seeing a state can solve the game from it without further
information.

State Collection - a collection that collects every state once and only once. 
It can be sought of as an associate array (or a map) of keys only. In fact,
the keys are mapped to extra information such as depth, order of stacks and
freecells and others, so it is more of a key-value collection.

State Packs - An allocation of states. Each one is a buffer in memory, that
contain an array of packs. Each buffer remains at a constant memory location,
but more buffers are allocated as necessary. The implementation of State packs 
reside in the files fcs_isa.c and fcs_isa.h.

Test Groups - a grouping of tests that dictate which one should be performed
one after the and placed into the same derived states list. Afterwards, this
list can be randomized, or prioritized.

Tests - A function that accepts a source state as input and fills a list of 
derived states according to the moves it can perform. Each game type has several
type of tests, which can be ordered and grouped according to input from the user.


