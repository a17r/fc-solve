--- Pressing ---

* Update INSTALL for the new CMake configuration.

* Add a --version flag to display the version.

* Update the NEWS file.

* Make sure one does not need "make install" to run "make test"
or "ctest -v".

--- Non-pressing ---

* Integrate the patsolve's prioritization and mixed BFS/DFS scan.

* Make the code splint-clean.

* Write an architecture document.

* Write a Perl Script to parse, analyze and do a sanity check for a solution.
(-p -t -sam)

* Write a multi-threaded version and see if it runs ok.

* Write a multi-process client/server program.

* Port to Java (?)

* Integrate into GNOME Freecell and/or GNOME AisleRiot and/or PySol.

* Code algorithms for similiar solitaire games. (maybe a perl program that 
generates C code). - DONE partialy

* Comment the code.

* Add a switch to ask the user if he wants to continue and enter a bigger 
iterations limit.

* Add a more verbose preset error handling. 
(explain why it could not be applied).

* Check for unmalloced data and if so gracefully exit.

* Add a limit to stacks number (in the case of Indirect Stack States),
number of states that are stored anywhere, etc.

* Experiment with a delta-based state storage.

* Code a generic tests grouping.

* Interactive mode? Continue a scan that reached its limit.

* Convert some of the documentation to Perl-POD or DocBook.

* Find a way to update the ChangeLog from the svn.

